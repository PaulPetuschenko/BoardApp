{"version":3,"sources":["components/Board/cardSpace.js","components/Board/AddCardButton.js","components/Board/BoardHeader.js","components/Card/Card.js","components/Board.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["cardSpace","AddCardButton","props","state","hover","this","setState","backgroundColor","cursor","className","onClick","React","Component","BoardHeader","dir","maxLength","defaultValue","Card","value","handleChange","bind","handleSubmit","event","target","alert","preventDefault","e","dataTransfer","setData","id","setTimeout","style","display","stopPropagation","element","height","scrollHeight","onDragStart","dragStart","onDragOver","dragOver","onDragEnd","dragEnd","type","rows","onInput","auto_grow","Board","numChildren","onAddChild","drop","children","i","push","key","number","document","getElementsByClassName","addChild","ChildComponent","BoardConstractor","Menu","BoardSpace","action","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7939c4bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction cardSpace (props) {\r\n    const dragOver = e => {\r\n        e.preventDefault();\r\n        if (e.target.className != \"board\")\r\n            e.dataTransfer.dropEffect = \"none\";\r\n        else\r\n            e.dataTransfer.dropEffect = \"all\";\r\n    } \r\n\r\n    return(\r\n        <div \r\n            id={props.id} \r\n            className={props.className}\r\n            onDrop={props.onDrop}\r\n            onDragOver={dragOver}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default cardSpace","import React, { Children } from 'react'\r\n\r\nclass AddCardButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hover: false\r\n        }\r\n    }\r\n\r\n    toggleHover() {\r\n        this.setState({hover: !this.state.hover})\r\n    }\r\n\r\n    render() {\r\n\r\n        var buttonStyle;\r\n        if (this.state.hover) {\r\n            buttonStyle = {backgroundColor: '#172b4d', cursor: 'pointer'}\r\n        } else {\r\n            buttonStyle = {backgroundColor: 'rgb(25, 236, 240)'}\r\n        }\r\n\r\n        return (\r\n            <a className=\"card-add-button\" onClick={this.props.onClick}>\r\n                <span className=\"add-card-icon fas fa-plus\"></span>\r\n                <span className=\"add-card-text\">Add new card</span>\r\n            </a>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddCardButton\r\n","import React, { Component } from 'react'\r\n\r\nexport default class BoardHeader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"board-header\">\r\n                <div className=\"board-name-wrapper\">\r\n                    <textarea className=\"board-name rounded-box\" dir=\"auto\" maxLength=\"512\" defaultValue={\"Name\"}></textarea>\r\n                </div>\r\n                <span className=\"rounded-box board-menu fas fa-ellipsis-h\"></span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nclass Card extends React.Component {\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: 'Card name'\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('An essay was submitted: ' + this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    dragStart(e) {\r\n        \r\n    \r\n        const target = e.target;\r\n            \r\n        e.dataTransfer.setData('card_id', target.id);\r\n\r\n        setTimeout(() => {\r\n            target.style.display = \"none\";\r\n        }, 0)\r\n    }\r\n\r\n    dragOver (e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n    \r\n    dragEnd (e) {\r\n        e.preventDefault();\r\n        const target = e.target;\r\n        target.style.display = \"block\"\r\n    }\r\n\r\n    auto_grow(element) {\r\n        element.target.style.height = \"inherit\";\r\n        element.target.style.height = `${element.target.scrollHeight + 2}px`;\r\n    }\r\n\r\n     render() {\r\n        return (\r\n            <div \r\n                className=\"card rounded-box\"\r\n                onDragStart={this.dragStart}\r\n                onDragOver={this.dragOver}\r\n                onDragEnd={this.dragEnd}\r\n                className=\"card\"\r\n                draggable=\"true\"\r\n                id={this.props.id}\r\n            >\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-text\">\r\n                    <textarea type=\"text\" className=\"auto-expand card-name rounded-box\" rows=\"1\" onInput={this.auto_grow} maxLength=\"10000\" defaultValue={\"Card info\"}></textarea>\r\n                    </div>\r\n                    <div className=\"card-menu\">\r\n                    <span className=\"rounded-box board-menu fas fa-ellipsis-h\"></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport cardSpace from './Board/cardSpace'\r\nimport AddCardButton from './Board/AddCardButton'\r\nimport BoardHeader from \"./Board/BoardHeader\";\r\n\r\nimport Card from './Card/Card'\r\nimport App from '../App';\r\n\r\nclass Board extends React.Component {\r\n    state = {\r\n        numChildren: 0\r\n    };\r\n\r\n    render() {\r\n        const children = [];\r\n\r\n        for (var i = 0; i < this.state.numChildren; i+=1) {\r\n            children.push(<ChildComponent key={i} number={i} />);\r\n        }\r\n        \r\n        var par = document.getElementsByClassName(\"board\")\r\n\r\n        return (\r\n            <BoardConstractor addChild={this.onAddChild}>{children}</BoardConstractor> \r\n        );\r\n    }\r\n    onAddChild = () => {\r\n        this.setState({\r\n            numChildren: this.state.numChildren + 1\r\n        });\r\n    };\r\n\r\n    drop = (target, event) => {\r\n        \r\n    }\r\n}\r\n\r\nconst ChildComponent = props => <Card className=\"card\" id={\"card\"+props.number}></Card>;\r\n\r\nclass BoardConstractor extends React.Component {\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div \r\n            id={this.props.id}\r\n        >\r\n            \r\n            <div className=\"rounded-box board\">\r\n                <BoardHeader/>\r\n                <div className=\"card-board\">\r\n                    \r\n                    {this.props.children}\r\n                </div>\r\n                <div className=\"board-footer\">\r\n                    <AddCardButton onClick={this.props.addChild}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Board\r\n\r\n","import React from 'react';\r\n\r\nfunction Menu (props) {\r\n    \r\n}\r\n\r\nexport default Menu; ","import React, { Component } from 'react';\nimport Board from \"./components/Board\";\nimport Menu from './components/Menu';\n\n\nclass BoardSpace extends Component {\n\trender() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<main className=\"flexbox\">\n\t\t\t\t\n\n\t\t\t\t{this.props.children}\n\t\t\t\t\n\t\t\t\t<div className=\"add-board rounded-box board\">\n\t\t\t\t\t<form action=\"\">\n\t\t\t\t\t\t<a className=\"add-board-link\" onClick={this.props.addChild}>\n\t\t\t\t\t\t\t<span className=\" add-board-icon fas fa-plus\"></span>\n\t\t\t\t\t\t\t<span className=\"add-board-text\">Add another board</span>\t\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t\t);\n\t}\n}\n\nconst ChildComponent = props => <Board id={\"board\"+props.number}></Board>;\n\nclass App extends Component {\n\tstate = {\n        numChildren: 0\n    };\n\n    render() {\n        const children = [];\n\n        for (var i = 0; i < this.state.numChildren; i+=1) {\n            children.push(<ChildComponent key={i} number={i} />);\n        }\n        \n        var par = document.getElementsByClassName(\"board\")\n\n        return (\n            <BoardSpace addChild={this.onAddChild}>{children}</BoardSpace> \n        );\n\t}\n\t\n    onAddChild = () => {\n        this.setState({\n            numChildren: this.state.numChildren + 1\n        });\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}